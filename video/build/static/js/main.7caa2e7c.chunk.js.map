{"version":3,"sources":["logo.svg","../node_modules/express/lib sync","Login.js","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Login","props","state","userName","passWord","onSubmit","this","setUsername","Password","onChange","setState","target","value","type","React","Component","App","isLoggedIn","setUserName","bind","console","log","taget","yourID","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,4ICA3C,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBO,GAAK,K,mQCsBVC,E,kDA1BX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,SAAU,GACVC,SAAU,IAJA,E,qDAQlB,OACI,6BACI,0BAAMC,SAAWC,KAAKL,MAAMM,YAAYD,KAAKJ,MAAMC,SAASG,KAAKJ,MAAMM,WACnE,2CACA,2BAAOC,SAAWH,KAAKI,SAAS,CAACP,SAAUT,IAAEiB,OAAOC,UACpD,2CACA,2BAAQH,SAAWH,KAAKI,SAAS,CAACP,SAAUT,IAAEiB,OAAOC,UACrD,2BAAOC,KAAO,iB,GAhBVC,IAAMC,WCgEXC,G,yDA5Db,WAAYf,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXe,YAAY,GAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALH,E,wDA4BRzB,GACV0B,QAAQC,IAAI3B,EAAEiB,OAAOC,OACnBN,KAAKI,SAAS,CACbP,SAAUT,EAAE4B,MAAMV,U,+BAOX,IAAD,OAcP,OACA,6BACE,0CAdI,EAAKK,WACA,kBAAC,EAAD,CAAOd,SAAW,EAAKe,cAGxB,6BACE,uCACC,2BAAI,EAAKhB,MAAMqB,QACf,2BAAI,EAAKrB,MAAMe,kB,GAhDbH,IAAMC,cCMLS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.7caa2e7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 251;","import React from \"express\";\nimport e from \"express\";\n\nclass Login extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            userName: '',\n            passWord: '',\n        }\n    }\nrender (){\n    return (\n        <div>\n            <form onSubmit={ this.props.setUsername(this.state.userName,this.state.Password)}>\n                <label>UserName</label>\n                <input onChange= {this.setState({userName: e.target.value})}></input>\n                <label>Password</label>\n                <input  onChange= {this.setState({userName: e.target.value})}></input>\n                <input type = 'submit'></input>\n            </form>\n        </div>\n    )\n}\n}\n          \n \n\n    \n\nexport default Login;","import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\"\nimport Login from './Login.js'\nimport io from \"socket.io-client\"\n\nclass  App extends React.Component () {\n  constructor(props){\n    super(props)\n    this.state = {\n      isLoggedIn: false\n    }\n    this.setUserName = this.setUserName.bind(this);\n  }\n//  const [isLoggedIn, setIsLoggedIn] = useState(true);\n//  const [userStreams, setUserStream] = useState();\n // const [partnerStream, setPartnerStream] = \n//  const [users, setUsers] = useState({}); \n//  const [yourID, setYourID] = useState();\n \n// const [userName , setUserName] = useState()\n// const userVideo = useRef();\n//  partnervVdeos = useRef()\n//  socket = useRef()\n\n// useEffect(() => {\n//   socket.current = io(\"/\");\n//   socket.current.on(\"yourID\", (id) => {\n//     setYourID(id);\n//   })\n//   socket.current.on(\"allUsers\", (users) => {\n//     setUsers(users);\n//   })\n// }, [])\n  \nsetUsername(e) { \n  console.log(e.target.value);\n    this.setState({\n     userName: e.taget.value\n     \n   });\n}\n  // connect to the soket and get id \n  // make a video stream store it in user steream \n  // ssocket.connect(\"/\").then(console.log(\"done\" ));\n  render() {\n    const userInterface =  () => {\n      if (this.isLoggedIn ){\n        return <Login userName= {this.setUserName}></Login>\n      } else {\n        return(\n              <div>\n                <p>helldddo</p>\n                 <p>{this.state.yourID}</p>\n                 <p>{this.state.isLoggedIn}</p>\n              </div>\n        ) \n      }\n    }\n    return (\n    <div>\n      <p>test me boi</p>\n      {userInterface()}\n    </div>\n  )\n    }\n}\nexport default App;\n//useEffect\n// emitlistening \n\n//  data sctructure \n// {\n//   1: {\n//     isOnline: false ,\n//     socketId : \"dfuweuhnuwe\",\n\n//      }\n//   2:  {\n//     isOnline: false ,\n//     socketId : \"dfuweuhnuwe\",\n//     userName : \"Dave275\",\n//     inChat: false,\n//     chattedWith: [\n//                    {\n//                     chatted: \"date/time\" ,\n//                     room: 2 , \n//                     chatType: \"game chat\", \n//                     opponents: [\n//                                   {\n//                                       isOnline: false ,\n//                                       socketId : \"dfuweuhnuwe\",\n//                                       userName : \"Dave275\",\n//                                       inChat: false,\n//                                   },\n                                  \n//                                   {\n//                                     isOnline: false ,\n//                                     socketId : \"dfuweuhnuwe\",\n//                                     userName : \"Dave275\",\n//                                     inChat: false,\n//                                 }\n//                               ] \n//                             }\n//                   ]\n//      }\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}